[? extends layout.htpl ?]

[? layout_body { ?]
[? base ?]
<h1>CO.NSOLI.FRAME</h1>
<section class="introduction">
<h2>これは、なに？</h2>
<p>co.nsoli.frameは、軽量かつポータブルな開発サーバ・HTMLプリコンパイラと、クライアントサイドMVCのためのJavaScript実装によるフレームワークです。
<br/>下記のような問題を効果的に解決するために創られました。</p>
<h3>HTMLのテンプレートにまつわる問題</h3>
<p>マークアップしたらテストデータですぐ表示の確認をしたい！</p>
<ul>
<li>サーバ:
うわぁ！1行しか結果がないときのことを考えてないぞ！</li>
<li>マークアップ:
動かしてみてから調整するんだから早くテスト環境に上げて！</li>
<li>マークアップ:
PHPの開発環境なんて手元にないよ！</li>
<li>サーバ:
これじゃぁ何度もテンプレート作業をやり直さないといけない！</li>
</ul>
<ul>
<li>サーバ:
レイアウトの共通部分を1か所にまとめたよ！</li>
<li>サーバ:
これで更新が楽になる！</li>
<li>マークアップ:
手元で確認できないから元のHTMLに修正したよ！</li>
<li>サーバ:
またテンプレート作業をやり直さないといけない！</li>
</ul>
<h3>MVCアーキテクチャとコンポーネント配置のギャップ</h3>
<p>同じ実装言語で、マシン境界を跨がず、ブラウザ内で直接MVCを実現したい！</p>
<ul>
<li>ぼくはJavaScript書けないです</li>
<li>私はJavaわかりません</li>
<li>よく相談しながら進めましょう…</li>
</ul>
<ul>
<li>ここはJavaScriptで実装してもらって、…</li>
<li>APIが呼ばれたらセッションから、…</li>
<li>うーん、似たような処理がJavaScriptにも、バックエンドにも…</li>
</ul>
<ul>
<li>なんでこんなにややこしくなったんだ…</li>
</ul>
<ul>
<li>修正作業、JavaScriptが悪いんだろうか、バックエンドがおかしいんだろうか？？</li>
</ul>
<ul>
<li>頭の中でいろんな実装言語が混ぜこぜになって、乗り物酔いみたいになってきた…</li>
</ul>
<h3>データの転送量とサーバ負荷</h3>
<p>いちいちサーバ側でHTMLレンダリングなんて、無駄じゃない？</p>
<ul>
<li>データ転送量をできるだけ削りたい</li>
<li>出来る限りCDN等を使ってサーバには処理をさせたくない(高負荷対策)</li>
<li>組込み機器などでマルチスレッドの処理が苦手・遅い→できるだけクライアント側に処理を持っていこう</li>
</ul>
<h3>バックエンドと表示ロジックと見た目の分離</h3>
<p>バックエンドビジネスロジック、表示ロジック、見た目、ちゃんと境界が引けていますか？</p>
<ul>
<li>わが社の製品は、相次ぐ個別対応のおかげで、もはやソースコードはぐちゃぐちゃだ！</li>
</ul>
<ul>
<li>一度、元になるものを作り上げたら、あとは見た目と表示ロジックだけ簡単に個別対応したい</li>
</ul>
<h3>モバイルアプリ対応</h3>
<ul>
<li>ウェブと同じソースからアプリが作れたらメンテナンスとか楽になるんだけど</li>
</ul>
<h3>常時結合開発</h3>
<ul>
<li>書いたら、すぐ動かす</li>
<li>変更したら、すぐに動かす</li>
<li>書いたら、すぐ動かす</li>
<li>変更したら、すぐに動かす…</li>
</ul>
<h2>結局、なに？？</h2>
<p>co.nsoli.frameは、大きく分けて2つの側面から説明できます。</p>
<p>一つ目は、軽量なGUIつき開発用サーバに組み込まれた、リアルタイムテンプレートエンジン、less cssコンパイラなどです。
これが開発ツールとしての側面です。
プリコンパイルすることができるので、ウェブサーバを内蔵した単なるHTMLのテンプレートプロセッサとしても使用できます。</p>
<p>見た目の問題(柔らかい問題)と、見せるためのロジック(すこし硬めの問題)を切り離しつつも、常時結合させることで精度の高く、効率の良い分業を実現します。</p>
<p>もう一つの側面は、クライアントサイドMVCフレームワークとしてのco.nsoli.frameです。
前者の仕様については比較的安定しましたが、後者に関しては日々、実際の開発案件の中で改善を重ねている途中です。
仕様的に安定した、とは言い難い状態ですが、私たちのゴールをわかりやすくするために、フレームワーク全体を公開しました。</p>
<p class="image"><img src="~/image/stack.png" alt="クライアントサイド ロジックスタック"/></p>
<p>実際にこのフレームワークを使用して構築した案件での、クライアント(ブラウザ)サイドのロジックスタックです。</p>
<h2>注意</h2>
<p>このフレームワークは下記のようなシチュエーションでは役に立たないでしょう。</p>
<ul>
<li>ユーザ覗かれたくないロジックが大量にある！</li>
<li>小数点以下の桁をもつ10進数を厳密に扱いたい(→将来、対応します)</li>
</ul>
<h2>ロードマップ</h2>
<p>いずれ実現したい機能をここに挙げます。</p>
<ul>
<li>軽量RPCフレームワーク(別途開発後に統合予定)</li>
<li>浮動小数点10進数演算ライブラリ</li>
</ul>
</section><!-- .introduction -->
[? } layout_body ?]
